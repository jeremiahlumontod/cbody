////////////////////////////////////////////////////////////////////////
//
// cbody2.java
//
// This file was generated by XMLSpy 2010 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.cbody;

public class cbody2 extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.cbody.cbody_TypeInfo.binder.getTypes()[com.cbody.cbody_TypeInfo._altova_ti_altova_cbody2]); }

	public static cbody2 loadFromFile(String filename) throws Exception
	{
		return new cbody2(com.altova.xml.XmlTreeOperations.loadDocument(filename));			
	}

	public static cbody2 loadFromString(String xmlstring) throws Exception
	{
		return new cbody2(com.altova.xml.XmlTreeOperations.loadXml(xmlstring));			
	}

	public static cbody2 loadFromBinary(byte[] binary) throws Exception
	{
		return new cbody2(com.altova.xml.XmlTreeOperations.loadXmlBinary(binary));
	}

	public void saveToFile(String filename, boolean prettyPrint) throws Exception
	{
		saveToFile(filename, prettyPrint, "UTF-8", false, false);
	}
	
	public void saveToFile(String filename, boolean prettyPrint, String encoding) throws Exception
	{
		saveToFile( filename, prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public void saveToFile(String filename, boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		com.altova.xml.XmlTreeOperations.saveDocument(doc, filename, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public String saveToString(boolean prettyPrint) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.altova.xml.XmlTreeOperations.saveXml(doc, prettyPrint);
	}

	public byte[] saveToBinary(boolean prettyPrint) throws Exception
	{
		return saveToBinary(prettyPrint, "UTF-8", false, false);
	}
	
	public byte[] saveToBinary(boolean prettyPrint, String encoding) throws Exception
	{
		return saveToBinary( prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public byte[] saveToBinary(boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.altova.xml.XmlTreeOperations.saveXmlBinary(doc, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public static cbody2 createDocument() throws Exception
	{
		org.w3c.dom.Document doc = com.altova.xml.XmlTreeOperations.createDocument();
		return new cbody2(doc);
	}

	public void setSchemaLocation(String schemaLocation) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) node;
		if (doc.getDocumentElement() == null)
			throw new Exception("SetSchemaLocation requires a root element.");
		String namespaceuri = doc.getDocumentElement().getNamespaceURI();
		if (namespaceuri == null || namespaceuri.length() == 0)
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation", schemaLocation);
		else
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation", namespaceuri + " " + schemaLocation);
	}
	
	public cbody2(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		bflag= new MemberElement_bflag (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._bflag]);
		code= new MemberElement_code (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._code]);
		completed= new MemberElement_completed (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._completed]);
		description= new MemberElement_description (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._description]);
		details= new MemberElement_details (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._details]);
		nextstep= new MemberElement_nextstep (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._nextstep]);
		processinfo= new MemberElement_processinfo (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._processinfo]);
		procidinstance= new MemberElement_procidinstance (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._procidinstance]);
		status= new MemberElement_status (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._status]);
		step= new MemberElement_step (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._step]);
		steps= new MemberElement_steps (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._steps]);
		taskid= new MemberElement_taskid (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._taskid]);
		taskname= new MemberElement_taskname (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._taskname]);
		type= new MemberElement_type (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._type]);
		usercode= new MemberElement_usercode (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._usercode]);
		usertype= new MemberElement_usertype (this, com.cbody.cbody_TypeInfo.binder.getMembers()[com.cbody.cbody_TypeInfo._altova_mi_altova_cbody2._usertype]);
	}
	// Attributes


	// Elements
	
	public MemberElement_bflag bflag;

		public static class MemberElement_bflag
		{
			public static class MemberElement_bflag_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_bflag member;
				public MemberElement_bflag_Iterator(MemberElement_bflag member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					bflagType nx = new bflagType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_bflag (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public bflagType at(int index) {return new bflagType(owner.getElementAt(info, index));}
			public bflagType first() {return new bflagType(owner.getElementFirst(info));}
			public bflagType last(){return new bflagType(owner.getElementLast(info));}
			public bflagType append(){return new bflagType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_bflag_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_code code;

		public static class MemberElement_code
		{
			public static class MemberElement_code_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_code member;
				public MemberElement_code_Iterator(MemberElement_code member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					codeType nx = new codeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_code (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public codeType at(int index) {return new codeType(owner.getElementAt(info, index));}
			public codeType first() {return new codeType(owner.getElementFirst(info));}
			public codeType last(){return new codeType(owner.getElementLast(info));}
			public codeType append(){return new codeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_code_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_completed completed;

		public static class MemberElement_completed
		{
			public static class MemberElement_completed_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_completed member;
				public MemberElement_completed_Iterator(MemberElement_completed member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					completedType nx = new completedType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_completed (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public completedType at(int index) {return new completedType(owner.getElementAt(info, index));}
			public completedType first() {return new completedType(owner.getElementFirst(info));}
			public completedType last(){return new completedType(owner.getElementLast(info));}
			public completedType append(){return new completedType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_completed_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_description description;

		public static class MemberElement_description
		{
			public static class MemberElement_description_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_description member;
				public MemberElement_description_Iterator(MemberElement_description member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					descriptionType nx = new descriptionType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_description (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public descriptionType at(int index) {return new descriptionType(owner.getElementAt(info, index));}
			public descriptionType first() {return new descriptionType(owner.getElementFirst(info));}
			public descriptionType last(){return new descriptionType(owner.getElementLast(info));}
			public descriptionType append(){return new descriptionType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_description_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_details details;

		public static class MemberElement_details
		{
			public static class MemberElement_details_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_details member;
				public MemberElement_details_Iterator(MemberElement_details member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					detailsType nx = new detailsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_details (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public detailsType at(int index) {return new detailsType(owner.getElementAt(info, index));}
			public detailsType first() {return new detailsType(owner.getElementFirst(info));}
			public detailsType last(){return new detailsType(owner.getElementLast(info));}
			public detailsType append(){return new detailsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_details_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_nextstep nextstep;

		public static class MemberElement_nextstep
		{
			public static class MemberElement_nextstep_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_nextstep member;
				public MemberElement_nextstep_Iterator(MemberElement_nextstep member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					nextstepType nx = new nextstepType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_nextstep (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public nextstepType at(int index) {return new nextstepType(owner.getElementAt(info, index));}
			public nextstepType first() {return new nextstepType(owner.getElementFirst(info));}
			public nextstepType last(){return new nextstepType(owner.getElementLast(info));}
			public nextstepType append(){return new nextstepType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_nextstep_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_processinfo processinfo;

		public static class MemberElement_processinfo
		{
			public static class MemberElement_processinfo_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_processinfo member;
				public MemberElement_processinfo_Iterator(MemberElement_processinfo member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					processinfoType nx = new processinfoType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_processinfo (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public processinfoType at(int index) {return new processinfoType(owner.getElementAt(info, index));}
			public processinfoType first() {return new processinfoType(owner.getElementFirst(info));}
			public processinfoType last(){return new processinfoType(owner.getElementLast(info));}
			public processinfoType append(){return new processinfoType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_processinfo_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_procidinstance procidinstance;

		public static class MemberElement_procidinstance
		{
			public static class MemberElement_procidinstance_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_procidinstance member;
				public MemberElement_procidinstance_Iterator(MemberElement_procidinstance member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					procidinstanceType nx = new procidinstanceType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_procidinstance (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public procidinstanceType at(int index) {return new procidinstanceType(owner.getElementAt(info, index));}
			public procidinstanceType first() {return new procidinstanceType(owner.getElementFirst(info));}
			public procidinstanceType last(){return new procidinstanceType(owner.getElementLast(info));}
			public procidinstanceType append(){return new procidinstanceType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_procidinstance_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_status status;

		public static class MemberElement_status
		{
			public static class MemberElement_status_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_status member;
				public MemberElement_status_Iterator(MemberElement_status member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					statusType nx = new statusType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_status (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public statusType at(int index) {return new statusType(owner.getElementAt(info, index));}
			public statusType first() {return new statusType(owner.getElementFirst(info));}
			public statusType last(){return new statusType(owner.getElementLast(info));}
			public statusType append(){return new statusType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_status_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_step step;

		public static class MemberElement_step
		{
			public static class MemberElement_step_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_step member;
				public MemberElement_step_Iterator(MemberElement_step member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					stepType nx = new stepType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_step (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public stepType at(int index) {return new stepType(owner.getElementAt(info, index));}
			public stepType first() {return new stepType(owner.getElementFirst(info));}
			public stepType last(){return new stepType(owner.getElementLast(info));}
			public stepType append(){return new stepType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_step_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_steps steps;

		public static class MemberElement_steps
		{
			public static class MemberElement_steps_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_steps member;
				public MemberElement_steps_Iterator(MemberElement_steps member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					stepsType nx = new stepsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_steps (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public stepsType at(int index) {return new stepsType(owner.getElementAt(info, index));}
			public stepsType first() {return new stepsType(owner.getElementFirst(info));}
			public stepsType last(){return new stepsType(owner.getElementLast(info));}
			public stepsType append(){return new stepsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_steps_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_taskid taskid;

		public static class MemberElement_taskid
		{
			public static class MemberElement_taskid_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_taskid member;
				public MemberElement_taskid_Iterator(MemberElement_taskid member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					taskidType nx = new taskidType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_taskid (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public taskidType at(int index) {return new taskidType(owner.getElementAt(info, index));}
			public taskidType first() {return new taskidType(owner.getElementFirst(info));}
			public taskidType last(){return new taskidType(owner.getElementLast(info));}
			public taskidType append(){return new taskidType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_taskid_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_taskname taskname;

		public static class MemberElement_taskname
		{
			public static class MemberElement_taskname_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_taskname member;
				public MemberElement_taskname_Iterator(MemberElement_taskname member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					tasknameType nx = new tasknameType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_taskname (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public tasknameType at(int index) {return new tasknameType(owner.getElementAt(info, index));}
			public tasknameType first() {return new tasknameType(owner.getElementFirst(info));}
			public tasknameType last(){return new tasknameType(owner.getElementLast(info));}
			public tasknameType append(){return new tasknameType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_taskname_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_type type;

		public static class MemberElement_type
		{
			public static class MemberElement_type_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_type member;
				public MemberElement_type_Iterator(MemberElement_type member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					typeType nx = new typeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_type (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public typeType at(int index) {return new typeType(owner.getElementAt(info, index));}
			public typeType first() {return new typeType(owner.getElementFirst(info));}
			public typeType last(){return new typeType(owner.getElementLast(info));}
			public typeType append(){return new typeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_type_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_usercode usercode;

		public static class MemberElement_usercode
		{
			public static class MemberElement_usercode_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_usercode member;
				public MemberElement_usercode_Iterator(MemberElement_usercode member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					usercodeType nx = new usercodeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_usercode (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public usercodeType at(int index) {return new usercodeType(owner.getElementAt(info, index));}
			public usercodeType first() {return new usercodeType(owner.getElementFirst(info));}
			public usercodeType last(){return new usercodeType(owner.getElementLast(info));}
			public usercodeType append(){return new usercodeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_usercode_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_usertype usertype;

		public static class MemberElement_usertype
		{
			public static class MemberElement_usertype_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_usertype member;
				public MemberElement_usertype_Iterator(MemberElement_usertype member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					usertypeType nx = new usertypeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_usertype (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public usertypeType at(int index) {return new usertypeType(owner.getElementAt(info, index));}
			public usertypeType first() {return new usertypeType(owner.getElementFirst(info));}
			public usertypeType last(){return new usertypeType(owner.getElementLast(info));}
			public usertypeType append(){return new usertypeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_usertype_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "", "cbody");}
}
